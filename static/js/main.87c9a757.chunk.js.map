{"version":3,"sources":["Components/Card/HeroCard.js","Components/Card/HeroList.js","Components/HeroDetail.js","App.js","serviceWorker.js","index.js"],"names":["HeroCard","hero","className","src","image","alt","detail","name","quirk","to","HeroList","heroData","map","key","id","HeroDetail","match","useState","setHero","useEffect","heroName","params","filter","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.87c9a757.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeroCard = ({ hero }) => {\r\n    return (\r\n        <div className='card-item'>\r\n            <div className=\"card-image\">\r\n                <img src={`images/heroes/${hero.image}`} alt=\"Hero\"/>\r\n            </div>\r\n            <div className=\"card-info\">\r\n                <span className=\"details\">{hero.detail}</span>\r\n                <span className=\"name\">Name: {hero.name}</span>\r\n                <span className=\"skills\">Quirk: {hero.quirk}</span>\r\n                <Link to={`/hero/${hero.name}`} className='btn'>View Hero Details</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroCard\r\n","import React from 'react';\r\nimport HeroCard from './HeroCard';\r\nimport './card.scss';\r\nimport heroData from '../../json-data.json';\r\n\r\nconst HeroList = () => {\r\n    return (\r\n        <div className='card'>\r\n            {\r\n                heroData.map(hero =>\r\n                    <HeroCard \r\n                        key={hero.id}\r\n                        hero={hero}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroList\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport heroData from '../json-data.json'; \r\nimport { Link } from 'react-router-dom';\r\nimport './hero-detail.scss';\r\n\r\nconst HeroDetail = ({ match }) => {\r\n    const [hero, setHero] = useState({\r\n        name: '',\r\n        image: '',\r\n        detail: '',\r\n        quirk: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        const heroName = match.params.hero;\r\n        setHero(heroData.filter(hero => heroName === hero.name)[0]);\r\n    }, [match.params.hero]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='container'>\r\n                <Link to='/' className='btn'>&larr; Back</Link>\r\n                <div className='hero-detail'>\r\n                    <img src={`/images/heroes/${hero.image}`} alt={hero.name} className=\"hero-image\"/>\r\n                    <div className=\"hero-info\">\r\n                        <span className=\"hero-info-details\">{hero.detail}</span>\r\n                        <span className=\"hero-info-name\">Name: {hero.name}</span>\r\n                        <span className=\"hero-info-skills\">Quirk: {hero.quirk}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default HeroDetail\r\n","import React, { Fragment } from 'react';\r\nimport HeroList from './Components/Card/HeroList';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport HeroDetail from './Components/HeroDetail';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <Fragment>\r\n                <Route exact path ='/' component={HeroList} />\r\n                <Route exact path ='/hero/:hero' component={HeroDetail} />\r\n            </Fragment>\r\n        </Router>\r\n        \r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}